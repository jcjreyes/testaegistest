# Generated by Django 3.0.6 on 2023-02-24 17:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GroupPhotoshootDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activated', models.BooleanField(default=True, null=True)),
                ('photoshoot_packages', models.URLField(max_length=255, null=True)),
                ('icon', models.FileField(null=True, upload_to='photoshoot_icons/')),
                ('description', models.CharField(max_length=255, null=True, verbose_name='individual photoshoot description')),
                ('soss_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot soss enlistment start date')),
                ('soss_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot soss enlistment end date')),
                ('sose_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot sose enlistment start date')),
                ('sose_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot sose enlistment end date')),
                ('jgsom_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot jgsom enlistment start date')),
                ('jgsom_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot jgsom enlistment end date')),
                ('soh_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot soh enlistment start date')),
                ('soh_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot soh enlistment end date')),
            ],
        ),
        migrations.CreateModel(
            name='IndividualPhotoshootDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activated', models.BooleanField(default=True, null=True)),
                ('photoshoot_packages', models.URLField(max_length=255, null=True)),
                ('icon', models.FileField(null=True, upload_to='photoshoot_icons/')),
                ('description', models.CharField(max_length=255, null=True, verbose_name='individual photoshoot description')),
                ('soss_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot soss enlistment start date')),
                ('soss_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot soss enlistment end date')),
                ('sose_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot sose enlistment start date')),
                ('sose_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot sose enlistment end date')),
                ('jgsom_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot jgsom enlistment start date')),
                ('jgsom_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot jgsom enlistment end date')),
                ('soh_enlistment_start', models.DateField(null=True, verbose_name='individual photoshoot soh enlistment start date')),
                ('soh_enlistment_end', models.DateField(null=True, verbose_name='individual photoshoot soh enlistment end date')),
            ],
        ),
        migrations.CreateModel(
            name='LateRegistrationDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activated', models.BooleanField(default=False, null=True)),
                ('description', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='LateRegistrationReasons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Photoshoot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_id', models.CharField(max_length=25, verbose_name='photoshoot reference id')),
                ('photoshoot_type', models.CharField(choices=[('Individual', 'Individual'), ('Group', 'Group')], max_length=15, verbose_name='photoshoot type')),
                ('is_rescheduling', models.BooleanField(default=False, null=True)),
                ('is_late', models.BooleanField(default=False, null=True)),
                ('is_retaking', models.BooleanField(default=False, null=True)),
                ('attended', models.BooleanField(default=False, null=True)),
                ('will_makeup', models.BooleanField(default=False, null=True, verbose_name='photoshoot student will avail makeup')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoshootDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('available_slots', 'available_slots'), ('full_slots', 'full_slots'), ('no_slots', 'no_slots')], default='available_slots', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('group', models.CharField(choices=[('SOM', 'School of Management'), ('SOH', 'School of Humanities'), ('SOSE', 'School of Science and Engineering'), ('SOSS', 'School of Social Sciences'), ('GROUP', 'Group')], max_length=15, null=True, verbose_name='photoshoot dates group')),
                ('available_date', models.DateField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhotoshootGuidelines',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('things_to_accomplish', tinymce.models.HTMLField()),
                ('reminders', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='PhotoshootPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=25, null=True, unique=True, verbose_name='photoshoot period title')),
                ('type', models.CharField(choices=[('Individual', 'Individual'), ('Group', 'Group'), ('Add Later', 'Add Later')], max_length=15, null=True, verbose_name='photoshoot period type')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoshootPeriodSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_slots', models.IntegerField(null=True)),
                ('slots_per_hour', models.IntegerField(null=True)),
                ('slots_per_day', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReschedulingDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activated', models.BooleanField(default=False, null=True)),
                ('description', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='ReschedulingReasons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RetakeDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activated', models.BooleanField(default=False, null=True)),
                ('description', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='RetakeReasons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Retake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('approved', 'approved'), ('declined', 'declined')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('reason', models.CharField(blank=True, max_length=250, null=True)),
                ('date_submitted', models.DateTimeField(auto_now_add=True, null=True)),
                ('photoshoot', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='retake_photoshoot', to='photoshoot.Photoshoot')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='retake', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rescheduling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('approved', 'approved'), ('declined', 'declined')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('admin', models.CharField(blank=True, max_length=255, null=True)),
                ('reason', models.CharField(blank=True, max_length=250, null=True)),
                ('excuse_letter', models.FileField(null=True, upload_to='')),
                ('charge_slip', models.FileField(null=True, upload_to='')),
                ('date_submitted', models.DateTimeField(auto_now_add=True, null=True)),
                ('photoshoot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rescheduling_photoshoot', to='photoshoot.Photoshoot')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rescheduling', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhotoshootDateTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('available_slots', 'available_slots'), ('full_slots', 'full_slots')], default='available_slots', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('time', models.TimeField(null=True)),
                ('slots', models.PositiveSmallIntegerField(default=0, null=True)),
                ('date', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='datetime_date', to='photoshoot.PhotoshootDate')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='photoshootdate',
            name='period',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='datetime_period', to='photoshoot.PhotoshootPeriod'),
        ),
        migrations.AddField(
            model_name='photoshoot',
            name='photoshoot_datetime',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photoshoot_datetime', to='photoshoot.PhotoshootDateTime'),
        ),
        migrations.AddField(
            model_name='photoshoot',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photoshoot', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='LateRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('approved', 'approved'), ('declined', 'declined')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('reason', models.CharField(blank=True, max_length=250, null=True)),
                ('excuse_letter', models.FileField(null=True, upload_to='late_registration_excuse_letters/%Y/%m/%d')),
                ('charge_slip', models.FileField(null=True, upload_to='late_registration_excuse_letters/%Y/%m/%d')),
                ('date_submitted', models.DateTimeField(auto_now_add=True, null=True)),
                ('photoshoot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='late_photoshoot', to='photoshoot.Photoshoot')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='late', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndividualPhotoshoot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school', models.CharField(blank=True, max_length=4, null=True, verbose_name='photoshoot student school')),
                ('realschool', models.CharField(blank=True, max_length=4, null=True, verbose_name='photoshoot student school')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='photoshoot student name')),
                ('id_number', models.CharField(blank=True, max_length=6, null=True, verbose_name='photoshoot student id number')),
                ('email', models.EmailField(blank=True, max_length=55, null=True, verbose_name='photoshoot student email')),
                ('is_scholar', models.BooleanField(default=False, null=True, verbose_name='photoshoot student is scholar')),
                ('photoshoot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='individual_photoshoot', to='photoshoot.Photoshoot')),
            ],
        ),
        migrations.CreateModel(
            name='GroupPhotoshoot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=55, null=True, verbose_name='photoshoot group name')),
                ('group_type', models.CharField(blank=True, choices=[('COA', 'Council of Organizations of the Ateneo'), ('LIONS', 'League of Independent Organizations'), ('COP', 'Communication Officers'), ('UAAP', 'Varsity')], max_length=55, null=True, verbose_name='photoshoot group type')),
                ('subgroup', models.CharField(blank=True, max_length=55, null=True, verbose_name='photoshoot subgroup')),
                ('size', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=125, null=True, verbose_name='emergency contact name')),
                ('emergency_contact_number', models.CharField(blank=True, max_length=55, null=True, verbose_name='emergency contact mobile number')),
                ('emergency_contact_email', models.EmailField(blank=True, max_length=125, null=True, verbose_name='emergency contact email')),
                ('is_accredited', models.BooleanField(default=False, null=True, verbose_name='photoshoot group is accredited')),
                ('photoshoot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='group_photoshoot', to='photoshoot.Photoshoot')),
            ],
        ),
        migrations.CreateModel(
            name='EnlistmentDates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.CharField(choices=[('SOM', 'School of Management'), ('SOH', 'School of Humanities'), ('SOSE', 'School of Science and Engineering'), ('SOSS', 'School of Social Sciences'), ('FFA', 'Free for All')], max_length=15, null=True, verbose_name='enlistment dates group')),
                ('date', models.DateField(null=True)),
                ('time_from', models.TimeField(null=True)),
                ('time_to', models.TimeField(null=True)),
                ('periods', models.ManyToManyField(to='photoshoot.PhotoshootPeriod')),
            ],
        ),
    ]
